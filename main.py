from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from langchain.memory import CassandraChatMessageHistory, ConversationBufferMemory
from langchain.llms import OpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
import json

# This secure connect bundle is autogenerated when you donwload your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-choose-your-own-adventure.zip'
}

# This token json file is autogenerated when you donwload your token, 
# if yours is different update the file name below
with open("choose_your_own_adventure-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
ASTRA_DB_KEYSPACE = "" # fill in the keyspace
OPENAI_API_KEY = "" # fill in the API key

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

# Create memory within the database
message_history = CassandraChatMessageHistory(
    session_id="session-key", # allows the session to save progress and resume where you left off
    session=session,
    keyspace=ASTRA_DB_KEYSPACE,
    ttl_seconds=3600 # time to live seconds
)

message_history.clear()

cass_buff_memory = ConversationBufferMemory(
    memory_key="chat_history",
    chat_memory=message_history
)

template = """
"You are now the guide of a mystical journey in the location.
A traveler named name seeks the lost treasure.
You must navigate him through challenges, choices, and consequences,
dynamically adapting the tale based on the traveler's decisions.
Your goal is to create a branching narrative experience where each choice
leads to a new path, ultimately determining your fate.

Here are some rules to follow:
1. Start by asking the player their name, where their journey shall take place, and what they are searching for. Give options for the journey and treasure they search for.
2. Start by asking the player to choose some kind of weapons that will be used later in the game
3. Have a few paths that lead to success
4. Do not include altars, temples or false gods
5. Have some paths that lead to death. If the user dies, generate a response that explains the death and ends in the text: "The End.", I will search for this text to end the game

Here is the chat history, use this to understand what to say next: {chat_history}
Human: {human_input}
AI:"""

# Prompt template - dynamically inject data
prompt = PromptTemplate(
    input_variables=["chat_history", "human_input"],
    template=template
)

# Initialize connection with OpenAI
llm = OpenAI(openai_api_key=OPENAI_API_KEY)
llm_chain = LLMChain(
    llm=llm,
    prompt=prompt,
    memory=cass_buff_memory
)

choice = "start"

while True:
    response = llm_chain.predict(human_input=choice)
    print(response.strip())

    if "The End." in response:
        break

    choice = input("Your reply: ")